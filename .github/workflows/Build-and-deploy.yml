name: Build, Test, and Deploy Backend

on:
  workflow_dispatch: # Manual trigger
  pull_request:
    branches:
      - development # PRs to development
      - main # PRs to main

jobs:
  # Node.js test & build job
  node-build:
    runs-on: ubuntu-latest
    outputs:
      test-result: ${{ steps.test.outcome }} # Capture test step outcome for downstream jobs

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache Node.js dependencies
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('api/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: ./api/package-lock.json

      # Install project dependencies (inside ./api)
      - name: Install dependencies
        run: npm ci --prefix ./api

      # Run tests (inside ./api)
      - name: Run tests
        id: test
        run: npm run test --prefix ./api

      # Build the project (inside ./api)
      - name: Build project
        run: npm run build --prefix ./api

  # Docker build & push to ACR
  docker-build:
    needs: node-build
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Determine Docker target based on branch
      - name: Set Docker build target
        id: docker-target
        run: |
          if [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            echo "target=dev" >> $GITHUB_OUTPUT
          else
            echo "target=prod" >> $GITHUB_OUTPUT
          fi

      # Build Docker image
      - name: Build Docker image
        run: docker build --target ${{ steps.docker-target.outputs.target }} -t my-api:latest ./api

      # Push only for prod builds
      - name: Push to Azure Container Registry
        if: github.ref_name == 'main'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Tag image for ACR
        if: github.ref_name == 'main'
        run: docker tag my-api:latest ${{ secrets.ACR_LOGIN_SERVER }}/my-api:latest

      - name: Push image to ACR
        if: github.ref_name == 'main'
        run: docker push ${{ secrets.ACR_LOGIN_SERVER }}/my-api:latest

  # Deploy API to Azure Web App
  deploy-api:
    needs: node-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Install API dependencies
      - name: Install dependencies
        run: npm ci --prefix ./api

      # Build API project
      - name: Build project
        run: npm run build --prefix ./api

      # Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          slot-name: production
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./api

openapi: 3.0.0
info:
  title: Logistics Backend API
  version: 1.0.0
  description: |
    This API powers a logistics backend system for package management, tracking, authentication, and log viewing. It supports:
      - User registration and authentication (JWT)
      - Secure access to user profile info
      - Package creation, retrieval, and status updates
      - Real-time package tracking
      - Viewing and clearing backend logs
    All protected endpoints require a valid JWT Bearer token in the Authorization header.

servers:
  - url: http://localhost:3000
    description: Local server
  - url: https://t8-server-d2fee2awcybjcqch.swedencentral-01.azurewebsites.net/
    description: Azure Web App (Production)

tags:
  - name: Package
    description: Endpoints for managing packages
  - name: Package Tracking
    description: Endpoints for managing package tracking data
  - name: Logs
    description: Endpoints for managing and viewing backend logs
  - name: Auth
    description: Endpoints for authentication (sign-up and sign-in)
  - name: Device
    description: Endpoints for managing devices

paths:
  /auth/sign-up:
    post:
      tags: [Auth]
      summary: Register a new user (customer, carrier, or admin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpPayload"
      responses:
        "201":
          description: User registered successfully. Returns a JWT token for authentication.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseAuth"
        "400":
          description: Invalid request body
        "409":
          description: Email or name already taken
        "500":
          description: Internal server error

  /auth/sign-in:
    post:
      tags: [Auth]
      summary: Authenticate user and issue JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInPayload"
      responses:
        "200":
          description: User authenticated successfully. Returns a JWT token for authentication in body AND in header.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseAuth"
        "400":
          description: Invalid credentials or request body
        "401":
          description: Unauthorized (invalid credentials)
        "500":
          description: Internal server error

  /auth/me:
    get:
      tags: [Auth]
      summary: Get profile of the authenticated user
      description: |
        Returns the full profile of the currently logged-in user. Requires a valid JWT Bearer token in the Authorization header.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profile of the logged-in user (id, email, name, role, companyName, timestamps)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "401":
          description: Unauthorized (missing or invalid token)
        "500":
          description: Internal server error

  /package:
    get:
      tags: [Package]
      summary: Get packages by sender, receiver, and filters
      description: |
        Returns a list of packages filtered by sender, receiver, carrier, status, and address. Requires authentication.
        Query parameters:
          - senderId, receiverId: required profile IDs
          - currentCarrierId, status: optional
          - senderAddress, receiverAddress: JSON-stringified address objects
          - limit: max number of results
          - readingsLimit: max tracking readings per package
        Requires JWT Bearer token.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: senderId
          required: true
          schema:
            type: integer
          description: Sender profile ID (required)
        - in: query
          name: receiverId
          required: true
          schema:
            type: integer
          description: Receiver profile ID (required)
        - in: query
          name: currentCarrierId
          required: false
          schema:
            type: integer
          description: Current carrier profile ID (optional)
        - in: query
          name: status
          required: false
          schema:
            $ref: "#/components/schemas/PackageStatus"
          description: Filter packages by status (optional)
        - in: query
          name: senderAddress
          required: false
          schema:
            type: string
          description: JSON-stringified address object
          example: '{"street":"Main St","city":"Stockholm","postalCode":"11122","country":"Sweden"}'
        - in: query
          name: receiverAddress
          required: false
          schema:
            type: string
          description: JSON-stringified address object
          example: '{"street":"Main St","city":"Stockholm","postalCode":"11122","country":"Sweden"}'
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: Max number of results
        - in: query
          name: readingsLimit
          required: false
          schema:
            type: integer
          description: Limit on tracking readings per package
      responses:
        "200":
          description: List of packages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackageArray"
        "400":
          description: Missing or invalid query params
        "500":
          description: Internal server error

    post:
      tags: [Package]
      summary: Create a new package
      description: |
        Creates a new package with sender, receiver, carrier, device, and addresses. Requires authentication.
        Returns the created package object.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePackagePayload"
      responses:
        "201":
          description: Package created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackage"
        "400":
          description: Invalid request body
        "500":
          description: Internal server error

  /package/{id}:
    get:
      tags: [Package]
      summary: Get package by ID
      description: Returns a package by its unique ID. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: readingsLimit
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Package found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackage"
        "404":
          description: Package not found
        "500":
          description: Internal server error

    patch:
      tags: [Package]
      summary: Update the status of a package by ID
      description: Steps the status of a package (pending → in_transit → out_for_delivery → delivered). Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Package status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackage"
        "400":
          description: Invalid package ID or request
        "500":
          description: Internal server error

  /package/device/{deviceId}:
    get:
      tags: [Package]
      summary: Get package by device ID
      description: Returns a package by its device ID. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            type: integer
        - in: query
          name: readingsLimit
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Package found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackage"
        "404":
          description: Package not found
        "500":
          description: Internal server error

  /package-tracking:
    get:
      tags: [Package Tracking]
      summary: Get all package tracking grouped by device
      description: Returns all package tracking records grouped by device. Requires authentication.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Tracking records grouped by device
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackageTrackingArray"
        "500":
          description: Internal server error

    post:
      tags: [Package Tracking]
      summary: Create a new package tracking record
      description: Creates a new tracking record for a package/device. Requires authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PackageTracking"
      responses:
        "201":
          description: Package tracking record created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackageTracking"
        "400":
          description: Invalid request body
        "500":
          description: Internal server error

  /package-tracking/{deviceId}:
    get:
      tags: [Package Tracking]
      summary: Get package tracking by device ID
      description: Returns tracking records for a specific device. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            type: integer
        - in: query
          name: latest
          required: false
          schema:
            type: boolean
          description: If true, returns only the latest record
      responses:
        "200":
          description: Tracking records for device
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackageTrackingArray"
        "404":
          description: Device not found
        "500":
          description: Internal server error

  /device:
    post:
      tags: [Device]
      summary: Create a new device
      responses:
        "201":
          description: Device created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseDevice"
        "500":
          description: Internal server error

    get:
      tags: [Device]
      summary: Get all devices
      responses:
        "200":
          description: List of devices
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseDeviceArray"
        "500":
          description: Internal server error

  /device/{id}:
    get:
      tags: [Device]
      summary: Get device by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Device found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseDevice"
        "404":
          description: Device not found
        "500":
          description: Internal server error

  /device/{id}/status:
    patch:
      tags: [Device]
      summary: Step the status of all packages associated with a device
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Status of packages updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  statusCode:
                    type: integer
                  data:
                    type: object
                    properties:
                      status:
                        $ref: "#/components/schemas/PackageStatus"
                      packages:
                        type: array
                        items:
                          $ref: "#/components/schemas/Package"
        "404":
          description: Device not found
        "500":
          description: Internal server error

  /logs:
    get:
      tags: [Logs]
      summary: Retrieve the backend log file (HTML/text)
      description: |
        Returns the backend log file as HTML (for viewing) or as plain text (for download). Requires authentication.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: The log file is returned as text
          content:
            text/plain:
              schema:
                type: string
        "404":
          description: Log file not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      tags: [Logs]
      summary: Clear the backend log file
      description: Empties the backend log file on the server. Requires authentication.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: The log file has been cleared
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: Failed to clear the log file
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  error:
                    type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        errors: {}
        data: {}
        token:
          type: string
        success:
          type: boolean

    ApiResponseAuth:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            token:
              type: string

    ApiResponsePackage:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/Package"

    ApiResponsePackageArray:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Package"

    ApiResponsePackageTracking:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/PackageTracking"

    ApiResponsePackageTrackingArray:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/PackageTracking"

    ApiResponseDevice:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/Device"

    ApiResponseDeviceArray:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Device"

    SignUpPayload:
      type: object
      required: [email, name, password, role, companyName]
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        password:
          type: string
        role:
          type: string
        companyName:
          type: string

    SignInPayload:
      type: object
      required: [password]
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        password:
          type: string

    CreatePackagePayload:
      type: object
      required:
        - senderId
        - receiverId
        - currentCarrierId
        - deviceId
        - senderAddress
        - receiverAddress
      properties:
        senderId:
          type: integer
        receiverId:
          type: integer
        currentCarrierId:
          type: integer
        deviceId:
          type: integer
        senderAddress:
          $ref: "#/components/schemas/AddressInput"
        receiverAddress:
          $ref: "#/components/schemas/AddressInput"

    Package:
      type: object
      properties:
        id:
          type: integer
        sender:
          $ref: "#/components/schemas/Profile"
        receiver:
          $ref: "#/components/schemas/Profile"
        currentCarrier:
          $ref: "#/components/schemas/Profile"
        senderAddress:
          $ref: "#/components/schemas/Address"
        receiverAddress:
          $ref: "#/components/schemas/Address"
        deviceId:
          type: string
        status:
          $ref: "#/components/schemas/PackageStatus"
        trackingCode:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        eta:
          type: string
          format: date-time
        readings:
          type: array
          items:
            $ref: "#/components/schemas/PackageTracking"

    PackageTracking:
      type: object
      properties:
        id:
          type: integer
        deviceId:
          type: integer
        lat:
          type: number
        lng:
          type: number
        temperature:
          type: number
        humidity:
          type: number
        createdAt:
          type: string
          format: date-time

    Device:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
          format: date-time

    PackageStatus:
      type: string
      enum:
        - pending
        - in_transit
        - delivered
        - cancelled
        - out_for_delivery

    Profile:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        role:
          type: string
        companyName:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Address:
      type: object
      properties:
        id:
          type: integer
        street:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string

    AddressInput:
      type: object
      required: [street, city, postalCode, country]
      properties:
        street:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string

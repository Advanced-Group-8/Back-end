openapi: 3.0.0
info:
  title: Package & Package Tracking API
  version: 1.0.0
  description: API for managing packages and tracking information.

servers:
  - url: http://localhost:3000
    description: Local server
  - url: https://t8-server-d2fee2awcybjcqch.swedencentral-01.azurewebsites.net/
    description: Azure Web App (Production)

tags:
  - name: Package
    description: Endpoints for managing packages
  - name: Package Tracking
    description: Endpoints for managing package tracking data

paths:
  /package:
    get:
      tags: [Package]
      summary: Get packages by sender and receiver
      parameters:
        - in: query
          name: senderId
          required: true
          schema:
            type: integer
          description: Sender profile ID (required)
        - in: query
          name: receiverId
          required: true
          schema:
            type: integer
          description: Receiver profile ID (required)
        - in: query
          name: currentCarrierId
          required: false
          schema:
            type: integer
          description: Current carrier profile ID (optional)
        - in: query
          name: status
          required: false
          schema:
            $ref: "#/components/schemas/PackageStatus"
          description: Filter packages by status (optional). See PackageStatus enum.
        - in: query
          name: senderAddress
          required: false
          schema:
            type: string
          description: >-
            JSON-stringified address object matching AddressInput schema (no `id`). Your code parses this
            via `parseJson(query.senderAddress, {})`. Example: {"street":"Main St","city":"Stockholm","postalCode":"11122","country":"Sweden"}
          example: '{"street":"Main St","city":"Stockholm","postalCode":"11122","country":"Sweden"}'
        - in: query
          name: receiverAddress
          required: false
          schema:
            type: string
          description: >-
            JSON-stringified address object matching AddressInput schema (no `id`). Example: {"street":"Main St","city":"Stockholm","postalCode":"11122","country":"Sweden"}
          example: '{"street":"Main St","city":"Stockholm","postalCode":"11122","country":"Sweden"}'
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: Max number of results (optional)
        - in: query
          name: readingsLimit
          required: false
          schema:
            type: integer
          description: Limit on tracking readings per package (optional)
      responses:
        "200":
          description: List of packages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackageArray"
        "400":
          description: Missing or invalid senderId/receiverId or malformed query params (e.g. invalid JSON in address)
        "500":
          description: Internal server error

    post:
      tags: [Package]
      summary: Create a new package
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePackagePayload"
      responses:
        "201":
          description: Package created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackage"
        "400":
          description: Invalid request body
        "500":
          description: Internal server error

  /package/{id}:
    get:
      tags: [Package]
      summary: Get package by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: readingsLimit
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Package found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackage"
        "404":
          description: Package not found
        "500":
          description: Internal server error

    patch:
      tags: [Package]
      summary: Step the status of a package by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the package to update
      responses:
        "200":
          description: Package status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackage"
        "400":
          description: Invalid package ID or request
        "500":
          description: Internal server error

  /package/device/{deviceId}:
    get:
      tags: [Package]
      summary: Get package by device ID
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: query
          name: readingsLimit
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Package found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackage"
        "404":
          description: Package not found
        "500":
          description: Internal server error

  /package-tracking:
    get:
      tags: [Package Tracking]
      summary: Get all package tracking grouped by device
      responses:
        "200":
          description: Tracking records grouped by device
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackageTrackingArray"
        "500":
          description: Internal server error

    post:
      tags: [Package Tracking]
      summary: Create a new package tracking record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PackageTracking"
      responses:
        "201":
          description: Package tracking record created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackageTracking"
        "400":
          description: Invalid request body
        "500":
          description: Internal server error

  /package-tracking/{deviceId}:
    get:
      tags: [Package Tracking]
      summary: Get package tracking by device ID
      parameters:
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
        - in: query
          name: latest
          required: false
          schema:
            type: boolean
          description: If true, returns only the latest record
      responses:
        "200":
          description: Tracking records for device
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponsePackageTrackingArray"
        "404":
          description: Device not found
        "500":
          description: Internal server error
  /logs:
    get:
      summary: Hämta backend-loggfilen
      description: Returnerar loggfilen som text/plain för nedladdning.
      responses:
        '200':
          description: Loggfilen returneras som text
          content:
            text/plain:
              schema:
                type: string
                example: |
                  {"timestamp":"2025-09-23T12:00:00Z","level":"INFO","message":"Server started"}
                  {"timestamp":"2025-09-23T12:01:00Z","level":"ERROR","message":"Något gick fel"}
        '404':
          description: Loggfilen finns inte
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Loggfilen finns inte.
    delete: 
      summary: Rensa backend-loggfilen
      description: Tömmer loggfilen på servern.
      responses:
        '200':
          description: Loggfilen är nu rensad
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Loggfilen är nu rensad.
        '500':
          description: Kunde inte rensa loggfilen
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Kunde inte rensa loggfilen.
                  error:
                    type: string
                    example: Felmeddelande från servern

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
        errors: {}
        data: {}
        success:
          type: boolean

    ApiResponsePackage:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/Package"

    ApiResponsePackageArray:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Package"

    ApiResponsePackageTracking:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/PackageTracking"

    ApiResponsePackageTrackingArray:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/PackageTracking"

    CreatePackagePayload:
      type: object
      required:
        - senderId
        - receiverId
        - currentCarrierId
        - deviceId
        - senderAddress
        - receiverAddress
      properties:
        senderId:
          type: integer
        receiverId:
          type: integer
        currentCarrierId:
          type: integer
        deviceId:
          type: string
        senderAddress:
          $ref: "#/components/schemas/AddressInput"
        receiverAddress:
          $ref: "#/components/schemas/AddressInput"

    Package:
      type: object
      properties:
        id:
          type: integer
        sender:
          $ref: "#/components/schemas/Profile"
        receiver:
          $ref: "#/components/schemas/Profile"
        currentCarrier:
          $ref: "#/components/schemas/Profile"
        senderAddress:
          $ref: "#/components/schemas/Address"
        receiverAddress:
          $ref: "#/components/schemas/Address"
        deviceId:
          type: string
        status:
          $ref: "#/components/schemas/PackageStatus"
        trackingCode:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        eta:
          type: string
          format: date-time
        readings:
          type: array
          items:
            $ref: "#/components/schemas/PackageTracking"

    PackageTracking:
      type: object
      properties:
        id:
          type: integer
        deviceId:
          type: string
        lat:
          type: number
        lng:
          type: number
        temperature:
          type: number
        humidity:
          type: number
        createdAt:
          type: string
          format: date-time

    PackageStatus:
      type: string
      enum:
        - pending
        - in_transit
        - delivered
        - cancelled
        - out_for_delivery

    Profile:
      type: object
      properties:
        id:
          type: integer
        email:
<<<<<<< HEAD
          type: string
        name:
          type: string
        role:
          type: string
        companyName:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Address:
      type: object
      properties:
        id:
          type: integer
        street:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string

    AddressInput:
      type: object
      required:
        - street
        - city
        - postalCode
        - country
      properties:
        street:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
=======
          type: string
        name:
          type: string
        role:
          type: string
        companyName:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Address:
      type: object
      properties:
        id:
          type: integer
        street:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string

    AddressInput:
      type: object
      required:
        - street
        - city
        - postalCode
        - country
      properties:
        street:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
>>>>>>> 34190bb917042953be034cdcc05f85cdc5bc8bd7
